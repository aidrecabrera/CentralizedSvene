package AtmMachineHashMap;

import animatefx.animation.FadeIn;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import javax.swing.*;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

import static javax.swing.JOptionPane.showMessageDialog;

public class AtmUI extends Application {
    public TextField CorPin;
    public TextField CorNumber;
    OptionMenu optionMenu = new OptionMenu();
    private double x, y;
    @Override
    public void start(Stage primaryStage) throws Exception {
        Parent root = FXMLLoader.load(getClass().getResource("AtmUI.fxml"));
        primaryStage.setScene(new Scene(root));
        //set stage borderless
        primaryStage.initStyle(StageStyle.UNDECORATED);
        primaryStage.initStyle(StageStyle.TRANSPARENT);
        //drag it here
        root.setOnMousePressed(event -> {
            x = event.getSceneX();
            y = event.getSceneY();
        });
        root.setOnMouseDragged(event -> {
            primaryStage.setX(event.getScreenX() - x);
            primaryStage.setY(event.getScreenY() - y);
        });
        primaryStage.show();
        new FadeIn(root).play();
    }

    public static void main(String[] args) {
        launch(args);
    }

    @FXML
    void LoginClick(ActionEvent actionEvent) throws IOException {
        int sessNum = Integer.parseInt(CorNumber.getText());
        int sessPin = Integer.parseInt(CorPin.getText());
        optionMenu.userNum = sessNum;
        optionMenu.userPin = sessPin;
        optionMenu.initAcc();
        optionMenu.getLogin();
    }

    @FXML
    void RegisterClick(ActionEvent event) throws IOException {
        optionMenu.createAccount();
    }


}

class Account {
    // variables
    private int customerNumber;
    private int pinNumber;
    private double checkingBalance = 0;
    private double savingBalance = 0;

    Scanner input = new Scanner(System.in);
    DecimalFormat moneyFormat = new DecimalFormat("'$'###,##0.00");

    public Account() {
    }

    public Account(int customerNumber, int pinNumber) {
        this.customerNumber = customerNumber;
        this.pinNumber = pinNumber;
    }

    public Account(int customerNumber, int pinNumber, double checkingBalance, double savingBalance) {
        this.customerNumber = customerNumber;
        this.pinNumber = pinNumber;
        this.checkingBalance = checkingBalance;
        this.savingBalance = savingBalance;
    }

    public int setCustomerNumber(int customerNumber) {
        this.customerNumber = customerNumber;
        return customerNumber;
    }

    public int getCustomerNumber() {
        return customerNumber;
    }

    public int setPinNumber(int pinNumber) {
        this.pinNumber = pinNumber;
        return pinNumber;
    }

    public int getPinNumber() {
        return pinNumber;
    }

    public double getCheckingBalance() {
        return checkingBalance;
    }

    public double getSavingBalance() {
        return savingBalance;
    }

    public double calcCheckingWithdraw(double amount) {
        checkingBalance = (checkingBalance - amount);
        return checkingBalance;
    }

    public double calcSavingWithdraw(double amount) {
        savingBalance = (savingBalance - amount);
        return savingBalance;
    }

    public double calcCheckingDeposit(double amount) {
        checkingBalance = (checkingBalance + amount);
        return checkingBalance;
    }

    public double calcSavingDeposit(double amount) {
        savingBalance = (savingBalance + amount);
        return savingBalance;
    }

    public void calcCheckTransfer(double amount) {
        checkingBalance = checkingBalance - amount;
        savingBalance = savingBalance + amount;
    }

    public void calcSavingTransfer(double amount) {
        savingBalance = savingBalance - amount;
        checkingBalance = checkingBalance + amount;
    }

    public void getCheckingWithdrawInput() {
        boolean end = false;
        while (!end) {
            try {
                double scanUserWithdrawCheckings = Double.parseDouble(JOptionPane.showInputDialog(
                        "Current Checkings Account Balance:" + moneyFormat.format(checkingBalance) +
                        "\nAmount to withdraw from Checkings Account:"
                ));
                double amount = scanUserWithdrawCheckings;
                if ((checkingBalance - amount) >= 0 && amount >= 0) {
                    calcCheckingWithdraw(amount);
                    JOptionPane.showMessageDialog(
                            null,
                            "\nCurrent Checkings Account Balance: " + moneyFormat.format(checkingBalance));
                    end = true;
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "\nBalance Cannot be Negative.");
                }
            } catch (InputMismatchException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "\nInvalid input");
            }
        }
    }

    public void getsavingWithdrawInput() {
        boolean end = false;
        while (!end) {
            double scanUserWithdrawSavings;
            try {
                scanUserWithdrawSavings = Double.parseDouble(JOptionPane.showInputDialog("Current Savings Account Balance: " + moneyFormat.format(savingBalance) + "\n Enter the amount you want to withdraw from Savings Account: "));
                double amount = scanUserWithdrawSavings;
                if ((savingBalance - amount) >= 0 && amount >= 0) {
                    calcSavingWithdraw(amount);
                    JOptionPane.showMessageDialog(
                            null,
                            "Current Savings Account Balance: " + moneyFormat.format(savingBalance));
                    end = true;
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "Balance Cannot Be Negative.");
                }
            } catch (InputMismatchException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "Invalid Input");
            }
        }
    }

    public void getCheckingDepositInput() {
        boolean end = false;
        while (!end) {
            try {
                JOptionPane.showMessageDialog(
                        null,
                        "Current Checkings Account Balance:" + moneyFormat.format(checkingBalance));
                double amount  = Double.parseDouble(JOptionPane.showInputDialog(
                        null,
                        "Amount to be Desposited to Checkings Account: "));
                if ((checkingBalance + amount) >= 0 && amount >= 0) {
                    calcCheckingDeposit(amount);
                    JOptionPane.showMessageDialog(
                            null,
                            "Current Checkings Account Balance:" + moneyFormat.format(checkingBalance));
                    end = true;
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "Balance Cannot Be Negative.");
                }
            } catch (InputMismatchException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "Invalid Choice");
                JOptionPane.showInputDialog(
                        null,
                        "Amount to be Desposited to Checkings Account: ");
            }
        }
    }

    public void getSavingDepositInput() {
        boolean end = false;
        while (!end) {
            double amount;
            try {
                JOptionPane.showMessageDialog(
                        null,
                        "Current Savings Account Balance: " + moneyFormat.format(savingBalance));
                amount = Double.parseDouble(JOptionPane.showInputDialog(
                        null,
                        "Amount you want to deposit into your Savings Account: "));

                if ((savingBalance + amount) >= 0 && amount >= 0) {
                    calcSavingDeposit(amount);
                    JOptionPane.showMessageDialog(
                            null,
                            "Current Savings Account Balance: " + moneyFormat.format(savingBalance));
                    end = true;
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "Balance Cannot Be Negative.");
                }
            } catch (InputMismatchException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "Invalid input");
                amount = Double.parseDouble(JOptionPane.showInputDialog(
                        null,
                        "Amount you want to deposit into your Savings Account: "));
            }
        }
    }

    public void getTransferInput(String accType) {
        boolean end = false;
        String[] transferOptions = {"Savings", "Cancel"};
        while (!end) {
            try {
                if (accType.equals("Checkings")) {
                    String uSelection = (String) JOptionPane.showInputDialog(
                            null,
                            "Select an account you wish to tranfers funds to: ",
                            "Account", JOptionPane.QUESTION_MESSAGE,
                            null, transferOptions, transferOptions[0]);

                    int choice = 0;
                    if (uSelection == "Savings") {
                        choice = 1;
                    }
                    else if (uSelection == "Cancel") {
                        choice = 2;
                    }

                    switch (choice) {
                        case 1:
                            JOptionPane.showMessageDialog(
                                    null,
                                    "Current Checkings Account Balance: " + moneyFormat.format(checkingBalance));
                            System.out.print("\nAmount you want to deposit into your Checkings Account: ");
                            double amount = Double.parseDouble(JOptionPane.showInputDialog(
                                    null,
                                    "Amount you want to deposit into your Checkings Account: "));
                            if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) {
                                calcCheckTransfer(amount);
                                JOptionPane.showMessageDialog(
                                        null, "\nCurrent Checkings Account Balance: " + moneyFormat.format(savingBalance));
                                end = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Input cannot be negative");
                            }
                            break;
                        case 2:
                            return;
                        default:
                            JOptionPane.showMessageDialog(null, "Invalid input");
                            break;
                    }
                } else if (accType.equals("Savings")) {
                    String uSelection = (String) JOptionPane.showInputDialog(
                            null,
                            "Select an account you wish to tranfers funds to: ",
                            "Account", JOptionPane.QUESTION_MESSAGE,
                            null, transferOptions, transferOptions[0]);
                    int choice = input.nextInt();
                    switch (choice) {
                        case 1:
                            JOptionPane.showMessageDialog(
                                    null,
                                    "Current Checkings Account Balance: " + moneyFormat.format(checkingBalance));
                            System.out.print("\nAmount you want to deposit into your Savings Account: ");
                            double amount = Double.parseDouble(JOptionPane.showInputDialog(
                                    null,
                                    "Amount you want to deposit into your Savings Account: "));
                            if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) {
                                calcCheckTransfer(amount);
                                JOptionPane.showMessageDialog(
                                        null, "\nCurrent Savings Account Balance: " + moneyFormat.format(savingBalance));
                                end = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Input cannot be negative");
                            }
                            break;
                        case 2:
                            return;
                        default:
                            JOptionPane.showMessageDialog(null, "Invalid input");
                            break;
                    }
                }
            } catch (InputMismatchException e) {
                JOptionPane.showMessageDialog(null, "Invalid input");
            }
        }
    }
}